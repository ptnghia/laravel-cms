name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_cms_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php-version: [8.2, 8.3]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql, redis
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache/files
        key: dependencies-composer-${{ hashFiles('composer.lock') }}
        restore-keys: dependencies-composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

    - name: Copy environment file
      run: cp .env.example .env.testing

    - name: Configure environment for testing
      run: |
        sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' .env.testing
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env.testing
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env.testing
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=laravel_cms_test/' .env.testing
        sed -i 's/DB_USERNAME=root/DB_USERNAME=root/' .env.testing
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/' .env.testing
        echo "CACHE_DRIVER=redis" >> .env.testing
        echo "REDIS_HOST=127.0.0.1" >> .env.testing
        echo "REDIS_PORT=6379" >> .env.testing

    - name: Generate application key
      run: php artisan key:generate --env=testing

    - name: Clear config cache
      run: php artisan config:clear

    - name: Run database migrations
      run: php artisan migrate --env=testing --force

    - name: Seed database
      run: php artisan db:seed --env=testing --class=RolePermissionSeeder

    - name: Run PHPUnit tests
      run: php artisan test --env=testing --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

    - name: Run PHP CS Fixer (dry run)
      run: |
        if [ -f vendor/bin/php-cs-fixer ]; then
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
        else
          echo "PHP CS Fixer not installed, skipping..."
        fi

    - name: Run PHPStan
      run: |
        if [ -f vendor/bin/phpstan ]; then
          vendor/bin/phpstan analyse --memory-limit=2G
        else
          echo "PHPStan not installed, skipping..."
        fi

    - name: Run Psalm
      run: |
        if [ -f vendor/bin/psalm ]; then
          vendor/bin/psalm --output-format=github
        else
          echo "Psalm not installed, skipping..."
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

    - name: Run security audit
      run: composer audit

    - name: Check for known security vulnerabilities
      run: |
        if [ -f vendor/bin/security-checker ]; then
          vendor/bin/security-checker security:check composer.lock
        else
          echo "Security checker not installed, using composer audit instead"
          composer audit
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, code-quality, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.3
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Create deployment artifact
      run: |
        mkdir -p artifacts
        tar -czf artifacts/laravel-cms-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.github' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          --exclude='storage/framework/sessions/*' \
          --exclude='storage/framework/views/*' \
          .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: laravel-cms-${{ github.sha }}
        path: artifacts/laravel-cms-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "This would typically involve:"
        echo "1. Download artifact"
        echo "2. Deploy to staging server"
        echo "3. Run migrations"
        echo "4. Clear caches"
        echo "5. Notify team"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "This would typically involve:"
        echo "1. Download artifact"
        echo "2. Deploy to production server"
        echo "3. Run migrations"
        echo "4. Clear caches"
        echo "5. Warm up caches"
        echo "6. Health check"
        echo "7. Notify team"
